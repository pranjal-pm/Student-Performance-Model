import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# Step 1: Create a synthetic dataset
np.random.seed(42)
n_samples = 1000
data = {
    'Attendance': np.random.randint(50, 100, n_samples),
    'Study_Hours': np.random.uniform(1, 10, n_samples),
    'Parental_Education': np.random.choice(['High School', 'College', 'Graduate'], n_samples),
    'Income_Level': np.random.choice(['Low', 'Medium', 'High'], n_samples),
    'Extra_Curricular': np.random.randint(0, 2, n_samples),
    'Final_Grade': np.random.uniform(40, 100, n_samples)
}

# Step 2: Convert to DataFrame
df = pd.DataFrame(data)

# One-hot encode categorical variables
df = pd.get_dummies(df, columns=['Parental_Education', 'Income_Level'], drop_first=True)

# Step 3: Split data into features (X) and target (y)
X = df.drop(columns=['Final_Grade'])
y = df['Final_Grade']

# Step 4: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Scale the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Step 6: Train a Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 7: Make predictions
y_pred = model.predict(X_test)

# Step 8: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE):", mse)
print("R-squared (R2):", r2)

# Step 9: Predict on new data
def predict_performance(new_data):
    new_data = pd.DataFrame(new_data)
    new_data = pd.get_dummies(new_data, columns=['Parental_Education', 'Income_Level'], drop_first=True)
    new_data = new_data.reindex(columns=X.columns, fill_value=0)
    new_data_scaled = scaler.transform(new_data)
    return model.predict(new_data_scaled)

# Example usage
new_student_data = [{
    'Attendance': 85,
    'Study_Hours': 6.5,
    'Parental_Education': 'College',
    'Income_Level': 'Medium',
    'Extra_Curricular': 1
}]

predicted_grades = predict_performance(new_student_data)
print("Predicted Final Grades:", predicted_grades)
